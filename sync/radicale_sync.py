#!/usr/bin/env python3
"""
Radicale <-> HomeHub Sync Service

This script performs bidirectional sync between:
- Radicale CalDAV calendars (.ics files)
- HomeHub reminders database

It also keeps Radicale user credentials in sync with HomeHub users.
"""

import os
import sys
import time
import hashlib
from datetime import datetime, timedelta
from pathlib import Path
import logging

# Add parent directory to path to import app modules
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models import User, Reminder

try:
    from icalendar import Calendar, Event
    import pytz
    from passlib.hash import bcrypt
except ImportError:
    print("ERROR: Required packages not installed. Run: pip install icalendar pytz passlib")
    sys.exit(1)

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('radicale_sync')

# Paths
RADICALE_DATA_DIR = Path('/app/radicale-data/collections')
RADICALE_CONFIG_DIR = Path('/app/radicale-config')
HTPASSWD_FILE = RADICALE_CONFIG_DIR / 'users'
RIGHTS_FILE = RADICALE_CONFIG_DIR / 'rights'

# Sync state tracking
SYNC_STATE_FILE = Path('/app/data/radicale_sync_state.json')


def sync_users():
    """Sync all users to Radicale htpasswd file and configure permissions"""
    logger.info("Syncing users to Radicale...")

    # Get all users with passwords set
    users = User.query.filter_by(password_set=True).all()

    if not users:
        logger.warning("No users with passwords set found")
        return

    # Create htpasswd entries for all users
    htpasswd_lines = []
    rights_rules = []

    for user in users:
        if not user.caldav_password_hash:
            logger.warning(f"User {user.username} has no CalDAV password hash - skipping")
            continue

        # Add to htpasswd
        htpasswd_lines.append(f"{user.username}:{user.caldav_password_hash}\n")

        # Configure calendar permissions
        # Admin always has full access to their own calendar (read/write)
        # Users with calendar_write_enabled can read/write the shared calendar
        # Users without calendar_write_enabled can only read the shared calendar

        if user.is_admin or user.calendar_write_enabled:
            # Read/write access to shared calendar
            rights_rules.append(f"""
# User: {user.username} - Write Access
[{user.username}-write]
user = {user.username}
collection = .*/homehub-calendar/.*
permissions = rw
""")
        else:
            # Read-only access to shared calendar
            rights_rules.append(f"""
# User: {user.username} - Read-Only Access
[{user.username}-read]
user = {user.username}
collection = .*/homehub-calendar/.*
permissions = r
""")

    # Write htpasswd file
    HTPASSWD_FILE.parent.mkdir(parents=True, exist_ok=True)
    with open(HTPASSWD_FILE, 'w') as f:
        f.writelines(htpasswd_lines)

    # Write rights file
    with open(RIGHTS_FILE, 'w') as f:
        f.write("# Radicale Rights Configuration - Auto-generated by HomeHub\n")
        f.write("# DO NOT EDIT MANUALLY - Changes will be overwritten\n\n")
        f.writelines(rights_rules)

    logger.info(f"Synced {len(users)} user(s) to Radicale htpasswd and rights file")


def get_user_calendar_path(username):
    """Get the path to a user's calendar collection directory"""
    # Radicale stores calendars as directories: /data/collections/collection-root/{username}/homehub-calendar/
    return RADICALE_DATA_DIR / 'collection-root' / username / 'homehub-calendar'


def ensure_user_calendar(username):
    """Ensure the shared family calendar collection exists in Radicale"""
    calendar_path = get_user_calendar_path(username)
    props_file = calendar_path / '.Radicale.props'

    if not props_file.exists():
        logger.info(f"Creating calendar collection for: {username}")
        calendar_path.mkdir(parents=True, exist_ok=True)

        # Create Radicale collection properties file
        # This defines the directory as a VEVENT calendar collection
        import json

        # All users see the same shared family calendar
        display_name = "HomeHub Family Calendar"
        color = "#4285F4"  # Blue color

        props = {
            "tag": "VCALENDAR",
            "D:displayname": display_name,
            "C:supported-calendar-component-set": "VEVENT",
            "ICAL:calendar-color": color
        }

        with open(props_file, 'w') as f:
            json.dump(props, f)

        logger.info(f"Created calendar collection at: {calendar_path}")


def reminder_to_ical_event(reminder):
    """Convert a HomeHub Reminder to an iCalendar Event"""
    event = Event()

    # Generate UID from reminder ID
    event.add('uid', f'homehub-reminder-{reminder.id}@homehub.local')
    event.add('summary', reminder.title)

    if reminder.description:
        event.add('description', reminder.description)

    # Get duration in minutes (default to 60 if not specified for timed events)
    duration_minutes = getattr(reminder, 'duration', None)

    # Set date/time
    if hasattr(reminder, 'time') and reminder.time:
        # Has time component - create datetime
        time_parts = reminder.time.split(':')
        dt = datetime.combine(
            reminder.date,
            datetime.min.time().replace(hour=int(time_parts[0]), minute=int(time_parts[1]))
        )
        event.add('dtstart', dt)

        # Use custom duration if provided, otherwise default to 60 minutes
        if duration_minutes and duration_minutes > 0:
            event.add('dtend', dt + timedelta(minutes=duration_minutes))
        else:
            event.add('dtend', dt + timedelta(hours=1))  # Default 1 hour duration
    else:
        # All-day event
        event.add('dtstart', reminder.date)
        # All-day events span from start date to end date (exclusive)
        # If duration is specified for all-day event, use it (in days)
        if duration_minutes and duration_minutes >= 1440:  # 1440 minutes = 1 day
            days = duration_minutes // 1440
            event.add('dtend', reminder.date + timedelta(days=days))
        else:
            event.add('dtend', reminder.date + timedelta(days=1))
        event['dtstart'].params['VALUE'] = 'DATE'
        event['dtend'].params['VALUE'] = 'DATE'

    # Add metadata
    event.add('created', reminder.timestamp)
    if hasattr(reminder, 'updated_at') and reminder.updated_at:
        event.add('last-modified', reminder.updated_at)
    else:
        event.add('last-modified', reminder.timestamp)

    # Add category if present
    if hasattr(reminder, 'category') and reminder.category:
        event.add('categories', [reminder.category])

    # Store creator as organizer
    if reminder.creator:
        event.add('x-homehub-creator', reminder.creator)

    return event


def ical_event_to_reminder(event, creator):
    """Convert an iCalendar Event to a HomeHub Reminder"""
    # Extract summary (title)
    summary = str(event.get('summary', ''))

    # Extract description
    description = str(event.get('description', '')) if 'description' in event else ''

    # Extract date and time
    dtstart = event.get('dtstart')
    dtend = event.get('dtend')
    duration = None
    if dtstart:
        dt = dtstart.dt
        if isinstance(dt, datetime):
            event_date = dt.date()
            event_time = dt.strftime('%H:%M')
            # Calculate duration in minutes if dtend is provided
            if dtend:
                end_dt = dtend.dt
                if isinstance(end_dt, datetime):
                    duration = int((end_dt - dt).total_seconds() / 60)
        else:
            event_date = dt
            event_time = None
            # For all-day events, calculate duration in minutes (days * 1440)
            if dtend:
                end_dt = dtend.dt
                if not isinstance(end_dt, datetime):
                    days = (end_dt - dt).days
                    if days > 1:  # Only set duration for multi-day events
                        duration = days * 1440
    else:
        event_date = datetime.now().date()
        event_time = None

    # Extract category
    categories = event.get('categories')
    category = None
    if categories and len(categories.cats) > 0:
        category = str(categories.cats[0])

    # Check if this is a HomeHub-originated event
    uid = str(event.get('uid', ''))
    homehub_id = None
    if uid.startswith('homehub-reminder-') and '@homehub.local' in uid:
        try:
            homehub_id = int(uid.split('-')[2].split('@')[0])
        except (IndexError, ValueError):
            pass

    return {
        'title': summary,
        'description': description,
        'date': event_date,
        'time': event_time,
        'duration': duration,
        'category': category,
        'creator': creator,
        'homehub_id': homehub_id,
        'uid': uid
    }


def sync_homehub_to_radicale(username):
    """Sync all HomeHub reminders to Radicale shared family calendar collection"""
    logger.info(f"Syncing HomeHub -> Radicale for shared family calendar ({username})")

    # Ensure user has a calendar collection
    ensure_user_calendar(username)
    calendar_path = get_user_calendar_path(username)

    # Get all reminders from HomeHub (all users' reminders visible to maintain shared calendar)
    reminders = Reminder.query.all()

    # Get existing event files in collection
    existing_files = set()
    if calendar_path.exists():
        for file_path in calendar_path.glob('*.ics'):
            existing_files.add(file_path.name)

    # Track which reminder IDs we're syncing
    synced_reminder_ids = set()

    # Sync each reminder as a separate .ics file
    synced_count = 0
    for reminder in reminders:
        event_filename = f"homehub-reminder-{reminder.id}.ics"
        event_file = calendar_path / event_filename

        # Create iCal event
        event = reminder_to_ical_event(reminder)

        # Wrap event in a VCALENDAR
        cal = Calendar()
        cal.add('prodid', '-//HomeHub//CalDAV Calendar//EN')
        cal.add('version', '2.0')
        cal.add_component(event)

        # Write event to its own file
        with open(event_file, 'wb') as f:
            f.write(cal.to_ical())

        synced_reminder_ids.add(reminder.id)
        synced_count += 1

    # Clean up deleted reminders
    # Remove .ics files for reminders that no longer exist in HomeHub
    for file_path in calendar_path.glob('homehub-reminder-*.ics'):
        try:
            # Extract reminder ID from filename
            filename = file_path.name
            reminder_id = int(filename.replace('homehub-reminder-', '').replace('.ics', ''))

            if reminder_id not in synced_reminder_ids:
                # This reminder was deleted from HomeHub, remove the file
                file_path.unlink()
                logger.info(f"Removed deleted reminder file: {filename}")
        except (ValueError, IndexError):
            # Skip files that don't match our naming pattern
            continue

    logger.info(f"Synced {synced_count} reminders to Radicale for {username}")


def sync_radicale_to_homehub(username):
    """Sync Radicale shared family calendar collection to HomeHub reminders"""
    logger.info(f"Syncing Radicale -> HomeHub from shared family calendar ({username})")

    calendar_path = get_user_calendar_path(username)
    if not calendar_path.exists():
        logger.info(f"No calendar collection found for {username}, skipping")
        return

    # Track HomeHub reminder UIDs
    existing_reminders = {f'homehub-reminder-{r.id}@homehub.local': r
                         for r in Reminder.query.all()}

    # Process all .ics files in the collection
    new_events_count = 0
    for event_file in calendar_path.glob('*.ics'):
        # Skip HomeHub-originated events (they're already in the database)
        if event_file.name.startswith('homehub-reminder-'):
            continue

        try:
            # Read the event file
            with open(event_file, 'rb') as f:
                cal = Calendar.from_ical(f.read())

            # Extract VEVENT component
            for component in cal.walk():
                if component.name == 'VEVENT':
                    uid = str(component.get('uid', ''))

                    # Skip if already imported
                    if uid in existing_reminders:
                        continue

                    # This is a new event from iOS - import it
                    reminder_data = ical_event_to_reminder(component, username)

                    # Create new reminder in HomeHub
                    reminder = Reminder(
                        date=reminder_data['date'],
                        title=reminder_data['title'],
                        description=reminder_data['description'],
                        creator=reminder_data['creator']
                    )

                    if reminder_data['time']:
                        reminder.time = reminder_data['time']
                    if reminder_data['duration']:
                        reminder.duration = reminder_data['duration']
                    if reminder_data['category']:
                        reminder.category = reminder_data['category']

                    db.session.add(reminder)
                    new_events_count += 1
                    logger.info(f"Importing iOS event: {reminder_data['title']}")

        except Exception as e:
            logger.error(f"Error processing event file {event_file.name}: {e}")
            continue

    if new_events_count > 0:
        db.session.commit()
        logger.info(f"Imported {new_events_count} new events from Radicale for {username}")
    else:
        logger.info(f"No new events to import for {username}")


def sync_all_users():
    """Perform bidirectional sync for all users with the shared family calendar"""
    # Get all users with passwords set
    users = User.query.filter_by(password_set=True).all()

    if not users:
        logger.warning("No users found for sync")
        return

    # Sync calendars for each user
    # All users share the same calendar data, but have individual CalDAV accounts
    for user in users:
        try:
            # Ensure user has a calendar collection
            ensure_user_calendar(user.username)

            # HomeHub -> Radicale (push all reminders to each user's calendar)
            sync_homehub_to_radicale(user.username)

            # Radicale -> HomeHub (import events from users with write permission)
            # Only import from users who can write (admin or calendar_write_enabled)
            if user.is_admin or user.calendar_write_enabled:
                sync_radicale_to_homehub(user.username)

        except Exception as e:
            logger.error(f"Error syncing calendar for {user.username}: {e}", exc_info=True)


def main():
    """Main sync loop"""
    logger.info("Starting Radicale sync service...")

    # Create Flask app context
    app = create_app()

    with app.app_context():
        # Initial user sync
        sync_users()

        # Sync loop
        sync_interval = int(os.environ.get('RADICALE_SYNC_INTERVAL', '300'))  # 5 minutes default
        logger.info(f"Sync interval: {sync_interval} seconds")

        while True:
            try:
                # Re-sync users (in case passwords changed)
                sync_users()

                # Bidirectional calendar sync
                sync_all_users()

                logger.info(f"Sync complete. Sleeping for {sync_interval} seconds...")
                time.sleep(sync_interval)

            except KeyboardInterrupt:
                logger.info("Shutting down sync service...")
                break
            except Exception as e:
                logger.error(f"Sync error: {e}", exc_info=True)
                time.sleep(60)  # Wait a minute before retrying


if __name__ == '__main__':
    main()
